Phần 1 bài 1
public interface Signal {
    double getAmplitude();
    double getFrequency();
    double getPeriod();
    double getWavelength();
    String describeSignalType();
    double calculateValueAtTime(double time);
}

Phần 2 bài 1 
public class DiscreteSignal implements Signal {
    private double amplitude;
    private double frequency;
    private double period;
    private double wavelength;

    public DiscreteSignal(double amplitude, double frequency, double period, double wavelength) {
        this.amplitude = amplitude;
        this.frequency = frequency;
        this.period = period;
        this.wavelength = wavelength;
    }

    @Override
    public double getAmplitude() {
        return amplitude;
    }

    @Override
    public double getFrequency() {
        return frequency;
    }

    @Override
    public double getPeriod() {
        return period;
    }

    @Override
    public double getWavelength() {
        return wavelength;
    }

    @Override
    public String describeSignalType() {
        return "This is a discrete signal.";
    }

    @Override
    public double calculateValueAtTime(double time) {
        if (time == Math.floor(time)) {
            return amplitude * Math.sin(2 * Math.PI * frequency * time);
        } else {
            return 0; // Tín hiệu không tồn tại tại các điểm không phải số nguyên
        }
    }
}
